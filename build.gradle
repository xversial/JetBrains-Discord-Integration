/*
 * Copyright 2017-2018 Aljoscha Grebe
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'java'
    id 'org.jetbrains.intellij' version '0.3.12'
    id 'com.github.ben-manes.versions' version '0.20.0'
}

import javax.swing.*
import java.awt.*

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

group = 'com.almightyalpaca.jetbrains.plugins.discord'
version = '1.0.0-beta'

ext {
    github = 'https://github.com/Almighty-Alpaca/JetBrains-Discord-Integration/'
}

intellij {
    version = '2018.2.4'
    // version '2016.1.4'

    downloadSources = true

    updateSinceUntilBuild = false
}

repositories {
    jcenter()
    maven {
        name = 'jitpack'
        url = 'https://jitpack.io/'
    }
}

dependencies {
    compile group: 'club.minnced', name: 'Java-DiscordRPC', version: 'v2.0.1'

    compile group: 'org.jgroups', name: 'jgroups', version: '4.0.15.Final'
}

patchPluginXml {
    changeNotes = { readInfoFile('CHANGELOG.md') }
    pluginDescription = { readInfoFile('DESCRIPTION.md') }
}

ext {
    readInfoFile = { String name ->
        // @formatter:off
        return file(name).text
            // Remove unnecessary whitespace
            .trim()

            // Replace headlines
            .replaceAll('(\r?\n|^)##(.*)(\r?\n|$)', { matcher -> "${matcher[1]}<b>${matcher[2]}</b>${matcher[3]}" })

            // Replace issue links
            .replaceAll('\\[([^\\[]+)\\]\\(([^\\)]+)\\)', { matcher -> "<a href=\"${matcher[2]}\">${matcher[1]}</a>" })
            .replaceAll('\\(#([0-9]+)\\)', { matcher -> "(<a href=\"${github}/issues/${matcher[1]}\">#${matcher[1]}</a>)" })

            // Replace inner lists
            .replaceAll("\r?\n  - (.*)", { matcher -> "<li>${matcher[1]}</li>" })
            .replaceAll("((?:<li>.*</li>)+)", { matcher -> "<ul>${matcher[1]}</ul>" })

            // Replace lists
            .replaceAll("\r?\n- (.*)", { matcher -> "<li>${matcher[1]}</li>" })
            .replaceAll("((?:<li>.*</li>)+)", { matcher -> "<ul>${matcher[1]}</ul>" })
            .replaceAll('\\s*<li>\\s*', '<li>')
            .replaceAll('\\s*</li>\\s*', '</li>')
            .replaceAll('\\s*<ul>\\s*', '<ul>')
            .replaceAll('\\s*</ul>\\s*', '</ul>')

            // Replace newlines
            .replace('\n', '<br>')
    // @formatter:on
    }

    showHtml = { String html ->
        JFrame frame = new JFrame("Changelog")
        frame.defaultCloseOperation = JFrame.DISPOSE_ON_CLOSE
        frame.contentPane = new JScrollPane(new JLabel('<html>' + html))
        Dimension screenSize = Toolkit.defaultToolkit.screenSize
        frame.preferredSize = new Dimension((screenSize.width / 2).intValue(), (screenSize.height / 2).intValue())
        frame.location = new Point((screenSize.width / 4).intValue(), (screenSize.height / 4).intValue())
        frame.alwaysOnTop = true
        frame.pack()
        frame.visible = true
    }
}

tasks.create(name: 'showChangelog') {
    group = 'markdown'

    doLast {
        showHtml(readInfoFile('CHANGELOG.md') as String)
    }
}

tasks.create(name: 'printChangelog') {
    group = 'markdown'

    doLast {
        println readInfoFile('CHANGELOG.md') as String
    }
}

tasks.create(name: 'showDescription') {
    group = 'markdown'

    doLast {
        showHtml(readInfoFile('DESCRIPTION.md') as String)
    }
}

tasks.create(name: 'printDescription') {
    group = 'markdown'

    doLast {
        println readInfoFile('DESCRIPTION.md') as String
    }
}

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            if (['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier -> selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/ }) {
                selection.reject('Release candidate')
            }
        }
    }
}
